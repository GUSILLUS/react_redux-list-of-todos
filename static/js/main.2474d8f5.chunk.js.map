{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","initialState","filterReducer","arr","playload","initialTodos","todosReducer","rootReducer","combineReducers","currentTodo","filter","todos","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","errorMessage","dispatch","selectTodo","className","map","id","title","completed","selected","classNames","onClick","todoId","findTodo","find","actionsCurrent","handleClick","TodoFilter","value","onChange","event","filterActions","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","selectedTodo","useState","isLoading","setIsLoading","setErrorMessage","user","setUser","email","name","useEffect","loadUser","a","userId","userFromServer","Error","message","href","App","filterState","loadTodos","todosFromServer","actionTodos","visibleTodos","useMemo","filteredTodos","lowerCaseQuery","toLowerCase","includes","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2474d8f5.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = {\n  type: 'filter/SET_QUERY';\n  payload: string;\n};\n\ntype SetStatusAction = {\n  type: 'filter/SET_STATUS';\n  payload: Status;\n};\n\ntype SetClearAction = {\n  type: 'filter/SET_CLEAR';\n};\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\nconst clearFilter = (): SetClearAction => ({\n  type: 'filter/SET_CLEAR',\n});\n\nexport const actions = { setQuery, setStatus, clearFilter };\n\nexport interface FilterState {\n  query: string;\n  status: Status;\n}\n\nconst initialState: FilterState = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (\n  state: FilterState = initialState,\n  action: SetQueryAction | SetStatusAction | SetClearAction,\n): FilterState => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case 'filter/SET_STATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    case 'filter/SET_CLEAR':\n      return {\n        ...state,\n        query: '',\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetAddAction = {\n  type: 'todos/SET_ADD',\n  playload: Todo[],\n};\n\nconst SetAdd = (arr: Todo[]): SetAddAction => ({\n  type: 'todos/SET_ADD',\n  playload: arr,\n});\n\nexport const actions = { SetAdd };\n\nconst initialTodos: Todo[] = [];\n\ntype Action = SetAddAction;\n\nconst todosReducer = (\n  state = initialTodos,\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET_ADD':\n      return [...action.playload, ...state];\n\n    default:\n      return [...state];\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport { FC } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as actionsCurrent } from '../../features/currentTodo';\n\ntype Props = {\n  todos: Todo[];\n  errorMessage: string;\n};\n\nexport const TodoList: FC<Props> = ({ todos, errorMessage }) => {\n  const dispatch = useAppDispatch();\n  const selectTodo = useAppSelector(state => state.currentTodo);\n\n  const handleClick = (todoId: number) => {\n    const findTodo = todos.find(todo => todo.id === todoId);\n\n    if (findTodo) {\n      dispatch(actionsCurrent.setTodo(findTodo));\n    }\n  };\n\n  return (\n    <>\n      {!todos && (\n        <p className=\"notification is-warning\">\n          {!errorMessage ? 'There are no todos matching current filter criteria' : `${errorMessage}`}\n        </p>\n      )}\n\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {todos.map(({\n            id, title, completed,\n          }) => {\n            const selected = id === selectTodo?.id;\n\n            return (\n              <tr\n                data-cy=\"todo\"\n                key={id}\n                className={classNames(\n                  { 'has-background-info-light': selected },\n                )}\n              >\n                <td className=\"is-vcentered\">{id}</td>\n                <td className=\"is-vcentered\">\n                  {completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p\n                    className={classNames(\n                      { 'has-text-danger': !completed },\n                      { 'has-text-success': completed },\n                    )}\n                  >\n                    {title}\n                  </p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => handleClick(id)}\n                  >\n                    <span className=\"icon\">\n                      <i\n                        className={\n                          selected ? 'far fa-eye-slash' : 'far fa-eye'\n                        }\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import { FC } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: FC = () => {\n  const dispatch = useAppDispatch();\n  const { status, query } = useAppSelector(state => state.filter);\n\n  const handleFilterChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterActions.setStatus(event.target.value as Status));\n  };\n\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.setQuery(event.target.value));\n  };\n\n  const handleClearSerch = () => {\n    dispatch(filterActions.clearFilter());\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            className=\"statusSelect\"\n            value={status}\n            onChange={handleFilterChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleSearchChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleClearSerch}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import { FC, useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as actionsCurrent } from '../../features/currentTodo';\n\nexport const TodoModal: FC = () => {\n  const dispatch = useAppDispatch();\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const [user, setUser] = useState<User>();\n\n  const { id, title, completed } = selectedTodo || {};\n  const { email, name } = user || {};\n\n  const closeTodo = () => {\n    dispatch(actionsCurrent.removeTodo());\n  };\n\n  useEffect(() => {\n    const loadUser = async () => {\n      setIsLoading(true);\n      try {\n        if (selectedTodo) {\n          const userFromServer = await getUser(selectedTodo.userId);\n\n          setUser(userFromServer);\n        }\n      } catch (error) {\n        if (error instanceof Error) {\n          setErrorMessage(error.message);\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={closeTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{title}</p>\n\n            {!errorMessage ? (\n              <p className=\"block\" data-cy=\"modal-user\">\n                {completed ? (\n                  <strong className=\"has-text-success\">Done</strong>\n                ) : (\n                  <strong className=\"has-text-danger\">Planned</strong>\n                )}\n                {' by '}\n                <a href={`mailto:${email}`}>{name}</a>\n              </p>\n            ) : (\n              <p>{errorMessage}</p>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as actionTodos } from './features/todos';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const selectTodo = useAppSelector(state => state.currentTodo);\n  const todos = useAppSelector(state => state.todos);\n  const filterState = useAppSelector(state => state.filter);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    const loadTodos = async () => {\n      setIsLoading(true);\n      try {\n        const todosFromServer = await getTodos();\n\n        dispatch(actionTodos.SetAdd(todosFromServer));\n      } catch (error) {\n        if (error instanceof Error) {\n          setErrorMessage(error.message);\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadTodos();\n  }, []);\n\n  const visibleTodos = useMemo(() => {\n    let filteredTodos = [...todos];\n\n    switch (filterState.status) {\n      case 'active':\n        filteredTodos = todos.filter(todo => !todo.completed);\n        break;\n\n      case 'completed':\n        filteredTodos = todos.filter(todo => todo.completed);\n        break;\n\n      default:\n        break;\n    }\n\n    if (filterState.query) {\n      const lowerCaseQuery = filterState.query.toLowerCase();\n\n      filteredTodos = filteredTodos\n        .filter(todo => todo.title.toLowerCase().includes(lowerCaseQuery));\n    }\n\n    return filteredTodos;\n  }, [todos, filterState]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList todos={visibleTodos} errorMessage={errorMessage} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}